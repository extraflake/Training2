// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ticketing_System.Context;

namespace Ticketing_System.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20211223034315_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Ticketing_System.Models.Account", b =>
                {
                    b.Property<string>("IdEmployee")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdEmployee");

                    b.ToTable("tb_account");
                });

            modelBuilder.Entity("Ticketing_System.Models.Accounts_Has_Role", b =>
                {
                    b.Property<string>("IdEmployee")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IdRole")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("IdEmployee", "IdRole");

                    b.HasIndex("IdRole");

                    b.ToTable("tb_account_has_role");
                });

            modelBuilder.Entity("Ticketing_System.Models.Employee", b =>
                {
                    b.Property<string>("IdEmployee")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdEmployee");

                    b.ToTable("tb_employee");
                });

            modelBuilder.Entity("Ticketing_System.Models.HistoryChat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateHistory")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdMessage")
                        .HasColumnType("int");

                    b.Property<int>("IdReply")
                        .HasColumnType("int");

                    b.Property<int?>("TicketIdTicket")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketIdTicket");

                    b.ToTable("tb_history_chat");
                });

            modelBuilder.Entity("Ticketing_System.Models.Kategori", b =>
                {
                    b.Property<int>("IdKategori")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IdEmployee")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NamaKategori")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdKategori");

                    b.HasIndex("IdEmployee")
                        .IsUnique()
                        .HasFilter("[IdEmployee] IS NOT NULL");

                    b.ToTable("tb_kategori");
                });

            modelBuilder.Entity("Ticketing_System.Models.Message", b =>
                {
                    b.Property<int>("IdMessage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("HistoryChatId")
                        .HasColumnType("int");

                    b.Property<string>("Messages")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdMessage");

                    b.HasIndex("HistoryChatId");

                    b.ToTable("tb_message");
                });

            modelBuilder.Entity("Ticketing_System.Models.Reply", b =>
                {
                    b.Property<int>("IdReply")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("HistoryChatId")
                        .HasColumnType("int");

                    b.Property<string>("Replys")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdReply");

                    b.HasIndex("HistoryChatId");

                    b.ToTable("tb_reply");
                });

            modelBuilder.Entity("Ticketing_System.Models.Report", b =>
                {
                    b.Property<int>("IdReport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdTicket")
                        .HasColumnType("int");

                    b.HasKey("IdReport");

                    b.HasIndex("IdTicket")
                        .IsUnique();

                    b.ToTable("tb_report");
                });

            modelBuilder.Entity("Ticketing_System.Models.Role", b =>
                {
                    b.Property<int>("IdRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameRole")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdRole");

                    b.ToTable("tb_role");
                });

            modelBuilder.Entity("Ticketing_System.Models.TechnicalSupport", b =>
                {
                    b.Property<string>("IdEmployee")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IdTicket")
                        .HasColumnType("int");

                    b.HasKey("IdEmployee");

                    b.ToTable("tb_technical_support");
                });

            modelBuilder.Entity("Ticketing_System.Models.Ticket", b =>
                {
                    b.Property<int>("IdTicket")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateRequest")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeIdEmployee")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdEmployee")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdHistoryChat")
                        .HasColumnType("int");

                    b.Property<int>("IdKategori")
                        .HasColumnType("int");

                    b.Property<int?>("KategoriIdKategori")
                        .HasColumnType("int");

                    b.Property<string>("Obtacles")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusTicket")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TechnicalSupportIdEmployee")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdTicket");

                    b.HasIndex("EmployeeIdEmployee");

                    b.HasIndex("KategoriIdKategori");

                    b.HasIndex("TechnicalSupportIdEmployee");

                    b.ToTable("tb_ticket");
                });

            modelBuilder.Entity("Ticketing_System.Models.Tracking", b =>
                {
                    b.Property<int>("IdTicket")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateProcess")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateSloved")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdEmployee")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdTicket");

                    b.HasIndex("IdEmployee")
                        .IsUnique()
                        .HasFilter("[IdEmployee] IS NOT NULL");

                    b.ToTable("tb_tracking");
                });

            modelBuilder.Entity("Ticketing_System.Models.Account", b =>
                {
                    b.HasOne("Ticketing_System.Models.Employee", "Employee")
                        .WithOne("Account")
                        .HasForeignKey("Ticketing_System.Models.Account", "IdEmployee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Ticketing_System.Models.Accounts_Has_Role", b =>
                {
                    b.HasOne("Ticketing_System.Models.Account", "Account")
                        .WithMany("Accounts_Has_Roles")
                        .HasForeignKey("IdEmployee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticketing_System.Models.Role", "Role")
                        .WithMany("Account_Has_Roles")
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Ticketing_System.Models.HistoryChat", b =>
                {
                    b.HasOne("Ticketing_System.Models.Ticket", "Ticket")
                        .WithMany("HistoryChats")
                        .HasForeignKey("TicketIdTicket");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Ticketing_System.Models.Kategori", b =>
                {
                    b.HasOne("Ticketing_System.Models.TechnicalSupport", "TechnicalSupport")
                        .WithOne("Kategori")
                        .HasForeignKey("Ticketing_System.Models.Kategori", "IdEmployee");

                    b.Navigation("TechnicalSupport");
                });

            modelBuilder.Entity("Ticketing_System.Models.Message", b =>
                {
                    b.HasOne("Ticketing_System.Models.HistoryChat", "HistoryChat")
                        .WithMany("Messages")
                        .HasForeignKey("HistoryChatId");

                    b.Navigation("HistoryChat");
                });

            modelBuilder.Entity("Ticketing_System.Models.Reply", b =>
                {
                    b.HasOne("Ticketing_System.Models.HistoryChat", "HistoryChat")
                        .WithMany("Replys")
                        .HasForeignKey("HistoryChatId");

                    b.Navigation("HistoryChat");
                });

            modelBuilder.Entity("Ticketing_System.Models.Report", b =>
                {
                    b.HasOne("Ticketing_System.Models.Ticket", "Ticket")
                        .WithOne("Report")
                        .HasForeignKey("Ticketing_System.Models.Report", "IdTicket")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Ticketing_System.Models.TechnicalSupport", b =>
                {
                    b.HasOne("Ticketing_System.Models.Employee", "Employee")
                        .WithOne("TechnicalSupport")
                        .HasForeignKey("Ticketing_System.Models.TechnicalSupport", "IdEmployee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Ticketing_System.Models.Ticket", b =>
                {
                    b.HasOne("Ticketing_System.Models.Employee", "Employee")
                        .WithMany("Tickets")
                        .HasForeignKey("EmployeeIdEmployee");

                    b.HasOne("Ticketing_System.Models.Kategori", "Kategori")
                        .WithMany("Tickets")
                        .HasForeignKey("KategoriIdKategori");

                    b.HasOne("Ticketing_System.Models.TechnicalSupport", "TechnicalSupport")
                        .WithMany("Tickets")
                        .HasForeignKey("TechnicalSupportIdEmployee");

                    b.Navigation("Employee");

                    b.Navigation("Kategori");

                    b.Navigation("TechnicalSupport");
                });

            modelBuilder.Entity("Ticketing_System.Models.Tracking", b =>
                {
                    b.HasOne("Ticketing_System.Models.TechnicalSupport", "TechnicalSupport")
                        .WithOne("Tracking")
                        .HasForeignKey("Ticketing_System.Models.Tracking", "IdEmployee");

                    b.HasOne("Ticketing_System.Models.Ticket", "Ticket")
                        .WithOne("Tracking")
                        .HasForeignKey("Ticketing_System.Models.Tracking", "IdTicket")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TechnicalSupport");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Ticketing_System.Models.Account", b =>
                {
                    b.Navigation("Accounts_Has_Roles");
                });

            modelBuilder.Entity("Ticketing_System.Models.Employee", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("TechnicalSupport");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Ticketing_System.Models.HistoryChat", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Replys");
                });

            modelBuilder.Entity("Ticketing_System.Models.Kategori", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Ticketing_System.Models.Role", b =>
                {
                    b.Navigation("Account_Has_Roles");
                });

            modelBuilder.Entity("Ticketing_System.Models.TechnicalSupport", b =>
                {
                    b.Navigation("Kategori");

                    b.Navigation("Tickets");

                    b.Navigation("Tracking");
                });

            modelBuilder.Entity("Ticketing_System.Models.Ticket", b =>
                {
                    b.Navigation("HistoryChats");

                    b.Navigation("Report");

                    b.Navigation("Tracking");
                });
#pragma warning restore 612, 618
        }
    }
}
